//////////////////////////////////////////////////////////////////////////////
//                                                                          //
// File name : LinearMinimizer.ih
//
// Creation : 2004/11/24
//
// Version : 2004/11/24
//
// Author : JOL
//
// Summary : Implementation of inline methods defined in LinearMinimizer.h 
//
// History :
//	2004/11/24 : ?Name? : ?What?
//
// Rcs Id : "@(#)class LinearMinimizer declaration."
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iostream>
//////////////////////////////////////////////////////////////////////////////

#if defined(NO_DEBUG)
#define ASSERT_LinearMinimizer(x)
#define DEBUGCMD_LinearMinimizer(x)
#else //defined(NO_DEBUG)
#define ASSERT_LinearMinimizer(x) if(!(x)) \
    { std::cerr << "Assertion failed : (" << #x << ')' << std::endl \
    << "In file : " << __FILE__ << " at line #" << __LINE__ << std::endl \
    << "Compiled the " << __DATE__ << " at " << __TIME__ << std::endl; abort();}
#define DEBUGCMD_LinearMinimizer(x) x
#endif // else defined(NO_DEBUG)

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

/**
 * Sum of all the absolute displacements of the last optimisation step.
 */
double
ImaGene::LinearMinimizer::sum() const
{
  return m_sum;
}

/**
 * Max of all the absolute displacements of the last optimisation step.
 */
double 
ImaGene::LinearMinimizer::max() const
{
  return m_max;
}


/**
 * Default constructor. Does nothing.
 */
ImaGene::LinearMinimizerByRelaxation::LinearMinimizerByRelaxation()
{}

/**
 * Destructor. Does nothing.
 */
ImaGene::LinearMinimizerByRelaxation::~LinearMinimizerByRelaxation()
{}

/**
 * Default constructor. Does nothing.
 */
ImaGene::LinearMinimizerByGradientDescent::LinearMinimizerByGradientDescent
( double step )
  : m_step( step )
{}

/**
 * Destructor. Does nothing.
 */
ImaGene::LinearMinimizerByGradientDescent::~LinearMinimizerByGradientDescent()
{}

/**
 * Default constructor. Does nothing.
 */
ImaGene::LinearMinimizerByAdaptiveStepGradientDescent::LinearMinimizerByAdaptiveStepGradientDescent
( double step )
  : m_step( step )
{}

/**
 * Destructor. Does nothing.
 */
ImaGene::LinearMinimizerByAdaptiveStepGradientDescent::~LinearMinimizerByAdaptiveStepGradientDescent()
{}



// /**
//  * Initializes the structure with all necessary information.
//  *
//  * @param v the initial value. Should be between [min] and [max].
//  * @param ref_v the absolute reference value.
//  * @param min_v the lower bound for the value.
//  * @param max_v the upper bound for the value.
//  * @param d the variable [value] is relative. To compare [value] with the next one, [delta] should be added.
//  * @param dist the distance between this value and the next one.
//  * @param cabs the curvilinear abscissa.
//  * @param dabs the discrete abscissa.
//  */
// void
// ImaGene::LinearMinimizer::ValueInfo::init( double v, double ref_v,
// 					   double min_v, double max_v,
// 					   double d, double dist, 
// 					   double cabs, double dabs )
// {
//   ASSERT_LinearMinimizer( ( v >= min_v ) && ( v <= max_v ) )
//   value = v;
//   old_value = v;
//   ref_value = ref_v;
//   min = min_v;
//   max = max_v;
//   delta = d;
//   dist_to_next = dist;
//   curv_abscissa = cabs;
//   disc_abscissa = dabs;
// }


// /**
//  * less than for ValueInfo  based on curvilinear abscissa.
//  * @param v1 the first value.
//  * @param v1 the second value.
//  * @return 'v1.curv_abscissa < v2.curv_abscissa'
//  */
// bool
// ImaGene::LinearMinimizer::ValueInfoCurvAbsCmp::operator()
//   ( const ValueInfo & v1, const ValueInfo & v2 )
// {
//   return v1.curv_abscissa < v2.curv_abscissa;
// }


// /**
//  * less than for ValueInfo  based on discrete abscissa.
//  * @param v1 the first value.
//  * @param v1 the second value.
//  * @return 'v1.disc_abscissa < v2.disc_abscissa'
//  */
// bool
// ImaGene::LinearMinimizer::ValueInfoDiscAbsCmp::operator()
//   ( const ValueInfo & v1, const ValueInfo & v2 )
// {
//   return v1.disc_abscissa < v2.disc_abscissa;
// }




  
/**
 * @return a reference on the information structure of the [i]th value.
 */
ImaGene::LinearMinimizer::ValueInfo & 
ImaGene::LinearMinimizer::rw( uint i )
{
  ASSERT_LinearMinimizer( ( m_values != 0 ) && ( i < maxSize() ) );
  
  return m_values[ i ];
}


/**
 * @return a const reference on the information structure of the [i]th value.
 */
const ImaGene::LinearMinimizer::ValueInfo & 
ImaGene::LinearMinimizer::ro( uint i ) const
{
  ASSERT_LinearMinimizer( ( m_values != 0 ) && ( i < maxSize() ) );
  
  return m_values[ i ];
}


/**
 * @return the maximum number of values stored in the object.
 */
uint
ImaGene::LinearMinimizer::maxSize() const
{
  return m_max_size;
}


/**
 * @return the number of values stored in the object.
 */
uint
ImaGene::LinearMinimizer::size() const
{
  return m_size;
}


/**
 * Specifies the exact number of valid values.
 * @param nb any number below 'maxSize()'.
 */
void
ImaGene::LinearMinimizer::setSize( uint nb )
{
  ASSERT_LinearMinimizer( nb <= maxSize() );
  m_size = nb;
}


/**
 * Specifies if the curve is open or not.
 * @param is_curve_open when 'true' the curve is open and the last
 * value does not depend on the first one, otherwise the curve is
 * closed and the last value is linked to the first one.
 */
void
ImaGene::LinearMinimizer::setIsCurveOpen( bool is_curve_open)
{
  m_is_curve_open = is_curve_open;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'LinearMinimizer'.
 * @param that_stream the output stream where the object is written.
 * @param that_object_to_display the object of class 'LinearMinimizer' to write.
 * @return the output stream after the writing.
 */
std::ostream&
ImaGene::operator<<( std::ostream & that_stream, const LinearMinimizer & that_object_to_display )
{
  that_object_to_display.selfDisplay( that_stream );
  return that_stream;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


