//////////////////////////////////////////////////////////////////////////////
//                                                                          //
// File name : PWFAffineFunction.ih
//
// Creation : 2004/04/14
//
// Version : 2004/04/14
//
// Author : JOL
//
// Summary : Implementation of inline methods defined in PWFAffineFunction.h 
//
// History :
//	2004/04/14 : ?Name? : ?What?
//
// Rcs Id : "@(#)class PWFAffineFunction declaration."
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iostream>
//////////////////////////////////////////////////////////////////////////////

#if defined(NO_DEBUG)
#define ASSERT_PWFAffineFunction(x)
#define DEBUGCMD_PWFAffineFunction(x)
#else //defined(NO_DEBUG)
#define ASSERT_PWFAffineFunction(x) if(!(x)) \
    { std::cerr << "Assertion failed : (" << #x << ')' << std::endl \
    << "In file : " << __FILE__ << " at line #" << __LINE__ << std::endl \
    << "Compiled the " << __DATE__ << " at " << __TIME__ << std::endl; abort();}
#define DEBUGCMD_PWFAffineFunction(x) x
#endif // else defined(NO_DEBUG)

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


namespace ImaGene {
  
  /////////////////////////////////////////////////////////////////////////////
  // Implementation of inline functions and external operators               //

  /**
   * Sums affine functions.
   * @param f1 any affine function.
   * @param f2 any affine function.
   * @return the sum of f1 and f2.
   */
  INLINE PWFAffineFunction
  operator+( const PWFAffineFunction & f1, const PWFAffineFunction & f2 )
  {
    return PWFAffineFunction::add( f1, f2 );
  }
  


  /**
   * Multiply an affine function by a scalar and returns the result.
   * @param f any affine function.
   * @param lambda any scalar.
   * @return the product of f by lambda.
   */
  INLINE PWFAffineFunction
  operator*( const PWFAffineFunction & f, float lambda )
  {
    return PWFAffineFunction::multiply( f, lambda );
  }
  
  
  /**
   * Multiply an affine function by a scalar and returns the result.
   * @param f any affine function.
   * @param lambda any scalar.
   * @return the product of f by lambda.
   */
  INLINE PWFAffineFunction
  operator*( float lambda, const PWFAffineFunction & f )
  {
    return PWFAffineFunction::multiply( f, lambda );
  }

  
  
  /**
   * Overloads 'operator<<' for displaying objects of class
   * 'PWFAffineFunction'.
   *
   * @param that_stream the output stream where the object is written.
   * @param that_object_to_display the object of class
   * 'PWFAffineFunction' to write.  @return the output stream after
   * the writing.
   */
  std::ostream&
  operator<<( std::ostream & that_stream, 
	      const PWFAffineFunction & that_object_to_display )
  {
    that_object_to_display.selfDisplay( that_stream );
    return that_stream;
  }
  
} //namespace ImaGene

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


