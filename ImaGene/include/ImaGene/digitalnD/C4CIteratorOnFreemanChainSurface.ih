//////////////////////////////////////////////////////////////////////////////
//                                                                          //
// File name : C4CIteratorOnFreemanChainSurface.ih
//
// Creation : 2008/05/22
//
// Version : 2008/05/22
//
// Author : JOL
//
// Summary : Implementation of inline methods defined in C4CIteratorOnFreemanChainSurface.h 
//
// History :
//	2008/05/22 : ?Name? : ?What?
//
// Rcs Id : "@(#)class C4CIteratorOnFreemanChainSurface declaration."
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iostream>
//////////////////////////////////////////////////////////////////////////////

#if defined(NO_DEBUG)
#define ASSERT_C4CIteratorOnFreemanChainSurface(x)
#define DEBUGCMD_C4CIteratorOnFreemanChainSurface(x)
#else //defined(NO_DEBUG)
#define ASSERT_C4CIteratorOnFreemanChainSurface(x) if(!(x)) \
    { std::cerr << "Assertion failed : (" << #x << ')' << std::endl \
    << "In file : " << __FILE__ << " at line #" << __LINE__ << std::endl \
    << "Compiled the " << __DATE__ << " at " << __TIME__ << std::endl; abort();}
#define DEBUGCMD_C4CIteratorOnFreemanChainSurface(x) x
#endif // else defined(NO_DEBUG)

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


/**
 * Destructor. 
 */
ImaGene::C4CIteratorOnFreemanChainSurface::~C4CIteratorOnFreemanChainSurface()
{
}

/**
 * Default Constructor.
 * The object is not valid.
 */
ImaGene::C4CIteratorOnFreemanChainSurface::C4CIteratorOnFreemanChainSurface()
  : m_ks( 0 )
{
}

/**
 * Copy constructor.
 * @param other the object to clone.
 */
ImaGene::C4CIteratorOnFreemanChainSurface::C4CIteratorOnFreemanChainSurface
( const C4CIteratorOnFreemanChainSurface & other )
  : m_ks( other.m_ks ), m_it( other.m_it )
{
}
 
/**
 * Initializes the iterator as following the sequence of Freeman
 * moves [s] with initial index position [pos].
 *
 * @param ks the digital space.
 *
 * @param it an iterator in a Freeman chain code.
 */
void 
ImaGene::C4CIteratorOnFreemanChainSurface::init
( const KnSpace* ks,
  const C4CIteratorOnFreemanChain & it )

{
  m_ks = ks;
  m_it = it;
}


/**
 * @return a clone of the current iterator.
 */
ImaGene::C4CIterator* 
ImaGene::C4CIteratorOnFreemanChainSurface::clone() const
{
  return new C4CIteratorOnFreemanChainSurface( *this );
}

/**
 * @param other any other iterator.
 * @return 'true' if [other] points to the same location as 'this'.
 */
bool 
ImaGene::C4CIteratorOnFreemanChainSurface::equals
( const C4CIterator & other ) const
{
  const C4CIteratorOnFreemanChainSurface* c4c = 
    dynamic_cast<const C4CIteratorOnFreemanChainSurface*>( &other );
  return ( c4c != 0 ) && ( m_it.equals( c4c->m_it ) );
}




///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'C4CIteratorOnFreemanChainSurface'.
 * @param that_stream the output stream where the object is written.
 * @param that_object_to_display the object of class 'C4CIteratorOnFreemanChainSurface' to write.
 * @return the output stream after the writing.
 */
std::ostream&
ImaGene::operator<<( std::ostream & that_stream, 
		 const C4CIteratorOnFreemanChainSurface & that_object_to_display )
{
  that_object_to_display.selfDisplay( that_stream );
  return that_stream;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


