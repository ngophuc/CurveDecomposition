//////////////////////////////////////////////////////////////////////////////
//                                                                          //
// File name : Shapes.ih
//
// Creation : 2003/07/24
//
// Version : 2003/07/24
//
// Author : JOL
//
// Summary : Implementation of inline methods defined in Shapes.h 
//
// History :
//	2003/07/24 : ?Name? : ?What?
//
// Rcs Id : "@(#)class Shapes declaration."
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iostream>
//////////////////////////////////////////////////////////////////////////////

#if defined(NO_DEBUG)
#define ASSERT_Shapes(x)
#define DEBUGCMD_Shapes(x)
#else //defined(NO_DEBUG)
#define ASSERT_Shapes(x) if(!(x)) \
    { std::cerr << "Assertion failed : (" << #x << ')' << std::endl \
    << "In file : " << __FILE__ << " at line #" << __LINE__ << std::endl \
    << "Compiled the " << __DATE__ << " at " << __TIME__ << std::endl; abort();}
#define DEBUGCMD_Shapes(x) x
#endif // else defined(NO_DEBUG)


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

/////////////////////////////////////////////////////////////////////////////
// class Shape
/////////////////////////////////////////////////////////////////////////////


/**
 * Destructor. 
 */
ImaGene::Shape::~Shape()
{
}


/////////////////////////////////////////////////////////////////////////////
// class EShape
/////////////////////////////////////////////////////////////////////////////


/**
 * Destructor. 
 */
ImaGene::EShape::~EShape()
{
}



///////////////////////////////////////////////////////////////////////////////
// class StarShaped
///////////////////////////////////////////////////////////////////////////////

/**
 * Destructor. 
 */
ImaGene::StarShaped::~StarShaped()
{
}


/**
 * @return a point p such that 'isInside(p)' returns 'true'.
 */
ImaGene::Vector
ImaGene::StarShaped::interiorPoint() const
{
  return center();
}


///////////////////////////////////////////////////////////////////////////////
// class Circle
///////////////////////////////////////////////////////////////////////////////

/**
 * @return the center of the star-shaped object.
 */
ImaGene::Vector2D
ImaGene::Circle::center() const
{
  return m_xcenter;
}

///////////////////////////////////////////////////////////////////////////////
// class Ellipse
///////////////////////////////////////////////////////////////////////////////

/**
 * @return the center of the star-shaped object.
 */
ImaGene::Vector2D
ImaGene::Ellipse::center() const
{
  return m_xcenter;
}

///////////////////////////////////////////////////////////////////////////////
// class RoundedSquare
///////////////////////////////////////////////////////////////////////////////

/**
 * @return the center of the star-shaped object.
 */
ImaGene::Vector2D
ImaGene::RoundedSquare::center() const
{
  return m_xcenter;
}

///////////////////////////////////////////////////////////////////////////////
// class Cngon
///////////////////////////////////////////////////////////////////////////////

/**
 * @return the center of the star-shaped object.
 */
ImaGene::Vector2D
ImaGene::Cngon::center() const
{
  return m_xcenter;
}

///////////////////////////////////////////////////////////////////////////////
// class Flower
///////////////////////////////////////////////////////////////////////////////

/**
 * @return the center of the star-shaped object.
 */
ImaGene::Vector2D
ImaGene::Flower::center() const
{
  return m_xcenter;
}


///////////////////////////////////////////////////////////////////////////////
// class AccFlower
///////////////////////////////////////////////////////////////////////////////

/**
 * @return the center of the star-shaped object.
 */
ImaGene::Vector2D
ImaGene::AccFlower::center() const
{
  return m_xcenter;
}


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

//                                                                           //
///////////////////////////////////////////////////////////////////////////////

