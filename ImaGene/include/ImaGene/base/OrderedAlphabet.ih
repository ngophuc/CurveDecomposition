//////////////////////////////////////////////////////////////////////////////
//                                                                          //
// File name : OrderedAlphabet.ih
//
// Creation : 2009/06/24
//
// Version : 2009/06/24
//
// Author : JOL
//
// Summary : Implementation of inline methods defined in OrderedAlphabet.h 
//
// History :
//	2009/06/24 : ?Name? : ?What?
//
// Rcs Id : "@(#)class OrderedAlphabet declaration."
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iostream>
//////////////////////////////////////////////////////////////////////////////

#if defined(NO_DEBUG)
#define ASSERT_OrderedAlphabet(x)
#define DEBUGCMD_OrderedAlphabet(x)
#else //defined(NO_DEBUG)
#define ASSERT_OrderedAlphabet(x) if(!(x)) \
    { std::cerr << "Assertion failed : (" << #x << ')' << std::endl \
    << "In file : " << __FILE__ << " at line #" << __LINE__ << std::endl \
    << "Compiled the " << __DATE__ << " at " << __TIME__ << std::endl; abort();}
#define DEBUGCMD_OrderedAlphabet(x) x
#endif // else defined(NO_DEBUG)

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

/**
 * Constructor from letters
 *
 * @param first the first letter of the alphabet.
 * @param nb the number of letters of the alphabet.
 *
 * Exemple: OrderedAlphabet( '0', 4 ) defines the alphabet for
 * 4-connected freeman chains.
 */
ImaGene::OrderedAlphabet::OrderedAlphabet( char first, uint nb )
  : m_first( first ), m_nb( nb )
{
  m_order = new uint[ nb ];
  ASSERT_OrderedAlphabet( ( m_order != 0 ) 
			   && "[ImaGene::OrderedAlphabet::OrderedAlphabet( char first, int nb )] error in new: no memory left ?" );
  for ( uint i = 0; i < m_nb; ++i )
    m_order[ i ] = i;
}

/**
 * @param c any valid letter in this alphabet.
 *
 * @return the index of the letter [c] in the order relation,
 * starting from 0 to m_nb-1.
 */
uint
ImaGene::OrderedAlphabet::order( char c ) const
{
  ASSERT_OrderedAlphabet( ( c - m_first ) < m_nb 
			   && "[ImaGene::OrderedAlphabet::order( char c )] invalid letter." );
  return m_order[ c - m_first ];
}

/**
 * @param i the index of some letter in the order relation,
 * between 0 and m_nb-1.
 *
 * @return c the corresponding letter in this alphabet.
 *
 * NB: O(nb of letters in the alphabet).
 */
char
ImaGene::OrderedAlphabet::letter( uint i ) const
{
  ASSERT_OrderedAlphabet( i < m_nb );
  for ( uint j = 0; j < m_nb; ++j )
    if ( m_order[ j ] == i )
      return m_first + j;
  return m_first;
}


/**
 * @param c1 a letter in the alphabet
 * @param c2 another letter in the same alphabet.
 * @return 'true' iff c1 < c2
 */
bool 
ImaGene::OrderedAlphabet::less( char c1, char c2 ) const
{
  return m_order[ c1 - m_first ] < m_order[ c2 - m_first ];
}

/**
 * @param c1 a letter in the alphabet
 * @param c2 another letter in the same alphabet.
 * @return 'true' iff c1 <= c2
 */
bool 
ImaGene::OrderedAlphabet::lessOrEqual( char c1, char c2 ) const
{
  return m_order[ c1 - m_first ] <= m_order[ c2 - m_first ];
}

/**
 * @param c1 a letter in the alphabet
 * @param c2 another letter in the same alphabet.
 * @return 'true' iff c1 == c2
 */
bool 
ImaGene::OrderedAlphabet::equal( char c1, char c2 ) const
{
  return c1 == c2;
}


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'OrderedAlphabet'.
 * @param that_stream the output stream where the object is written.
 * @param that_object_to_display the object of class 'OrderedAlphabet' to write.
 * @return the output stream after the writing.
 */
std::ostream&
ImaGene::operator<<( std::ostream & that_stream, 
		 const OrderedAlphabet & that_object_to_display )
{
  that_object_to_display.selfDisplay( that_stream );
  return that_stream;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


