//////////////////////////////////////////////////////////////////////////////
//                                                                          //
// File name : HashTable.ih
//
// Creation : 2004/12/21
//
// Version : 2004/12/21
//
// Author : JOL
//
// Summary : Implementation of inline methods defined in HashTable.h 
//
// History :
//	2004/12/21 : ?Name? : ?What?
//
// Rcs Id : "@(#)class HashTable declaration."
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iostream>
#include "ImaGene/mathutils/Mathutils.h"
//////////////////////////////////////////////////////////////////////////////

#if defined(NO_DEBUG)
#define ASSERT_HashTable(x)
#define DEBUGCMD_HashTable(x)
#else //defined(NO_DEBUG)
#define ASSERT_HashTable(x) if(!(x)) \
    { std::cerr << "Assertion failed : (" << #x << ')' << std::endl \
    << "In file : " << __FILE__ << " at line #" << __LINE__ << std::endl \
    << "Compiled the " << __DATE__ << " at " << __TIME__ << std::endl; abort();}
#define DEBUGCMD_HashTable(x) x
#endif // else defined(NO_DEBUG)

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //



/**
 * Destructor. 
 */
template <class Value>
ImaGene::HashTable<Value>::~HashTable()
{
  clear();
}


/**
 * Constructor.
 * The object is empty.
 */
template <class Value>
ImaGene::HashTable<Value>::HashTable()
  : m_entries( 0 ), m_n( 0 ), m_size( 0 )
{
}


/**
 * Initializes the hash table for a given set of keys [m] and for
 * an approximate number of values [n].
 *
 * @param m no key can be bigger than this number.
 * @param n the number of lists in the hashtable.
 */
template <class Value>
void
ImaGene::HashTable<Value>::init( uint m, uint n )
{
  clear();
  m_p = Mathutils::greaterPrime( (unsigned long long) m );
  // std::cout << "m=" << m << " n=" << n << " p=" << m_p << std::endl;
  do
    m_a = Mathutils::random( m_p );
  while ( m_a == 0 );
  
  m_b = Mathutils::random( m_p );
  // std::cout << "a=" << m_a << " b=" << m_b << std::endl;
  m_n = n;
  m_entries = new HashTableEntry*[ n ];
  ASSERT_HashTable( m_entries != 0 );
  for ( uint i = 0; i < m_n; ++i )
    m_entries[ i ] = 0;
}



/**
 * Clears the data structure.
 */
template <class Value>
void
ImaGene::HashTable<Value>::clear()
{
  if ( m_entries != 0 )
    {
      for ( uint i = 0 ; i < m_n; ++i )
	{
	  HashTableEntry* ptr = m_entries[ i ];
	  while ( ptr != 0 )
	    {
	      HashTableEntry* tmp = ptr;
	      ptr = ptr->next;
	      delete tmp;
	    }
	}
      delete[] m_entries;
    }
  m_size = 0;
}


/**
 * @return the number of entries in the hashtable.
 */
template <class Value>
uint
ImaGene::HashTable<Value>::size() const
{
  return m_size;
}




///////////////////////////////////////////////////////////////////////////////
// ----------------------- Access services ------------------------------



/**
 * Maps the specified key to the specified value in the HashTable.
 *
 * @param key a key.
 * @param object a pointer to an object.
 */
template <class Value>
void
ImaGene::HashTable<Value>::put( Key key, const Value & value )
{
  uint i = hash( key );
  HashTableEntry* ptr = m_entries[ i ];
  HashTableEntry* last = 0;
  while ( ptr != 0 && ( ptr->key != key ) )
    {
      last = ptr;
      ptr = ptr->next;
    }
  if ( ptr == 0 )
    {
      ptr = new HashTableEntry;
      ptr->key = key;
      ptr->value = value;
      ptr->next = 0;
      if ( last == 0 ) m_entries[ i ] = ptr;
      else             last->next = ptr;
      ++m_size;
    }
  else
    {
      ptr->value = value;
    }
}


/**
 * Accessor. Tells if a key is present in the hashtable.
 *
 * @param key a key.
 * @return 'true' if the key was present, 'false' otherwise.
 */
template <class Value>
bool
ImaGene::HashTable<Value>::contains( Key key ) const
{
  uint i = hash( key );
  HashTableEntry* ptr = m_entries[ i ];
  while ( ( ptr != 0 ) && ( ptr->key != key ) )
    ptr = ptr->next;
  return ptr != 0;
}


/**
 * Accessor. Returns the value associated with a given key. If the
 * key is not present, returns the default value.
 *
 * @param key a key.
 * @return the value to which the specified key is mapped in.
 */
template <class Value>
const Value & 
ImaGene::HashTable<Value>::get( Key key ) const
{
  uint i = hash( key );
  HashTableEntry* ptr = m_entries[ i ];
  while ( ( ptr != 0 ) && ( ptr->key != key ) )
    ptr = ptr->next;
  return ( ptr != 0 ) ? ptr->value : m_default;
}


/**
 * Accessor. Returns the value associated with a given key. If the
 * key is not present, returns 'false', otherwise returns 'true'.
 *
 * @param key a key.
 * @param value (returns) the value associated with the key.
 * @return 'true' if the key was present, 'false' otherwise.
 */
template <class Value>
bool 
ImaGene::HashTable<Value>::get( Key key, Value & value ) const
{
  uint i = hash( key );
  HashTableEntry* ptr = m_entries[ i ];
  while ( ( ptr != 0 ) && ( ptr->key != key ) )
    ptr = ptr->next;
  if ( ptr != 0 ) 
    {
      value = ptr->value;
      return true;
    }
  else
    return false;
}


/**
 * Deletes the given key [key] from the HashTable.
 *
 * @param key a key.
 */
template <class Value>
void
ImaGene::HashTable<Value>::erase( Key key )
{
  uint i = hash( key );
  HashTableEntry* ptr = m_entries[ i ];
  HashTableEntry* last = 0;
  while ( ( ptr != 0 ) && ( ptr->key != key ) )
    {
      last = ptr;
      ptr = ptr->next;
    }
  if ( ptr != 0 )
    {
      if ( last == 0 ) m_entries[ i ] = ptr->next;
      else             last->next = ptr->next;
      delete ptr;
      --m_size;
    }
}


/**
 * Removes the key and its corresponding value from the HashTable.
 *
 * @param key a key.
 * @return the corresponding object.
 */
template <class Value>
Value
ImaGene::HashTable<Value>::remove( Key key )
{
  uint i = hash( key );
  HashTableEntry* ptr = m_entries[ i ];
  HashTableEntry* last = 0;
  while ( ( ptr != 0 ) && ( ptr->key != key ) )
    {
      last = ptr;
      ptr = ptr->next;
    }
  if ( ptr != 0 )
    {
      if ( last == 0 ) m_entries[ i ] = ptr->next;
      else             last->next = ptr->next;
      Value v = ptr->value;
      delete ptr;
      --m_size;
      return v;
    }
  else
    return m_default;
}


/**
 * Read-only accessor. Returns the value associated with a given
 * key. If the key is not present, returns the default value.
 *
 * @param key a key.
 * @return the value to which the specified key is mapped in.
 */
template <class Value>
const Value & 
ImaGene::HashTable<Value>::operator[]( Key key ) const
{
  return get( key );
}


/**
 * Read-write accessor. Returns a reference to the value
 * associated with a given key. If the key is not present, returns
 * the default value.
 *
 * @param key a key.
 * @return the value to which the specified key is mapped in.
 */
template <class Value>
Value & 
ImaGene::HashTable<Value>::operator[]( Key key )
{
  uint i = hash( key );
  HashTableEntry* ptr = m_entries[ i ];
  HashTableEntry* last = 0;
  while ( ptr != 0 && ( ptr->key != key ) )
    {
      last = ptr;
      ptr = ptr->next;
    }
  if ( ptr == 0 )
    {
      ptr = new HashTableEntry;
      ptr->key = key;
      ptr->next = 0;
      if ( last == 0 ) m_entries[ i ] = ptr;
      else             last->next = ptr;
      ++m_size;
    }
  return ptr->value;
}






///////////////////////////////////////////////////////////////////////////////
// ------------------------- Internals ------------------------------------

  

/**
 * Hashes the given key.
 *
 * @param key any key.
 * @return an integer between 0 and m_n - 1
 */
template <class Value>
uint
ImaGene::HashTable<Value>::hash( Key key ) const
{
  unsigned long long k = (unsigned long long) key;
  return ( (uint) ( ( k * m_a + m_b ) % m_p ) ) % m_n;
}

/**
 * Gives the number of lists which have 0, 1, ..., >= n-1 entries.
 * 
 * @param n maximum number of entries per list.
 * @param tbl an array of size [n], (returns).
 */
template <class Value>
void 
ImaGene::HashTable<Value>::distribution( uint n, uint* tbl ) const
{
  for ( uint i = 0; i < n; ++i )
    tbl[ i ] = 0;
  for ( uint i = 0; i < m_n; ++i )
    {
      uint j = 0;
      HashTableEntry* ptr = m_entries[ i ];
      while ( ptr != 0 ) 
	{
	  ++j;
	  ptr = ptr->next;
	}
      if ( j >= n ) j = n - 1;
      tbl[ j ] += 1;
    }
}



//                                                                           //
///////////////////////////////////////////////////////////////////////////////


