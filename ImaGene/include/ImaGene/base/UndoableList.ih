//////////////////////////////////////////////////////////////////////////////
//                                                                          //
// File name : UndoableList.ih
//
// Creation : 2010/02/12
//
// Version : 2010/02/12
//
// Author : JOL
//
// Summary : Implementation of inline methods defined in UndoableList.h 
//
// History :
//	2010/02/12 : ?Name? : ?What?
//
// Rcs Id : "@(#)class UndoableList declaration."
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iostream>
//////////////////////////////////////////////////////////////////////////////

#if defined(NO_DEBUG)
#define ASSERT_UndoableList(x)
#define DEBUGCMD_UndoableList(x)
#else //defined(NO_DEBUG)
#define ASSERT_UndoableList(x) if(!(x)) \
    { std::cerr << "Assertion failed : (" << #x << ')' << std::endl \
    << "In file : " << __FILE__ << " at line #" << __LINE__ << std::endl \
    << "Compiled the " << __DATE__ << " at " << __TIME__ << std::endl; abort();}
#define DEBUGCMD_UndoableList(x) x
#endif // else defined(NO_DEBUG)

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

// ----------------------- Standard services ------------------------------

/**
 * Destructor. 
 */
template <typename NodeType>
INLINE
ImaGene::UndoableList<NodeType>::~UndoableList()
{
  clear();
}

/**
 * Constructor.
 * @param store when 'true', stores modifications of the list.
 */
template <typename NodeType>
INLINE
ImaGene::UndoableList<NodeType>::UndoableList( bool store )
  : m_is_storing( store ),
    m_vnode( NodeType(), &m_vnode, &m_vnode )
{
}


/**
 * This operation takes O(n) operations, if n is the number of
 * elements in the list.
 *
 * @return the number of elements in the list.
 */
template <typename NodeType>
INLINE
uint 
ImaGene::UndoableList<NodeType>::size() const
{
  uint nb = 0;
  for ( typename ImaGene::UndoableList<NodeType>::const_iterator it = begin();
	it != end();
	++it )
    ++nb;
  return nb;
}


/**
 * @return 'true' if the list is currently storing modifications.
 */
template <typename NodeType>
INLINE
bool
ImaGene::UndoableList<NodeType>::isStoring() const
{
  return m_is_storing;
}

/**
 * @param store when 'true', stores modifications of the list.
 *
 * If store is 'false', then the stack of modifications is cleared.
 */
template <typename NodeType>
INLINE
void
ImaGene::UndoableList<NodeType>::setStoringMode( bool store )
{
  if ( store != m_is_storing )
    {
      if ( ! store )
	clearModifs();
      m_is_storing = ! m_is_storing;
    }
}


/**
 * Begins a group of modifications.
 */
template <typename NodeType>
INLINE
void 
ImaGene::UndoableList<NodeType>::beginModifGroup()
{
  if ( isStoring() )
    m_modifs.push( Modif::makeSeparator() );
}

/**
 * Ends a group of modifications.
 */
template <typename NodeType>
INLINE
void 
ImaGene::UndoableList<NodeType>::endModifGroup()
{
  // Nothing to do.
}
    
/**
 * Undo one operation if storing mode is on.
 * @return the type of undo operation done.
 */
template <typename NodeType>
INLINE
typename ImaGene::UndoableList<NodeType>::OperationType
ImaGene::UndoableList<NodeType>::undoOne()
{
  OperationType ot = Separator;
  if ( isStoring() )
    {
      Modif & modif = m_modifs.top();
      ot = modif.type();
      if ( ot == Suppression )
	{
	  Cell* n = modif.cell2();
	  Cell* p = n->previous;
	  Cell* c = modif.cell1();
	  c->previous = p;
	  c->next = n;
	  p->next = c;
	  n->previous = c;
	}
      else if ( ot == Insertion )
	{
	  Cell* c = modif.cell1();
	  ASSERT_UndoableList( c->next == modif.cell2() );
	  Cell* p = c->previous;
	  Cell* n = c->next;
	  p->next = n;
	  n->previous = p;
	  delete c;
	}
      else if ( ot == Modification )
	{
	  Cell* r = modif.cell1();
	  Cell* c = modif.cell2();
	  Cell* p = c->previous;
	  Cell* n = c->next;
	  ASSERT_UndoableList( r->previous == c->previous );
	  ASSERT_UndoableList( r->next == c->next );
	  p->next = r;
	  n->previous = r;
	  delete c;
	}
      m_modifs.pop();
    }
  return ot;
}

/**
 * Undo one group of operations if storing mode is on.
 */
template <typename NodeType>
INLINE
void
ImaGene::UndoableList<NodeType>::undoGroup()
{
  while ( undoOne() != Separator )
    ;
}


/**
 * @return an iterator on the first element of the list.
 */
template <typename NodeType>
INLINE
typename ImaGene::UndoableList<NodeType>::quasi_iterator 
ImaGene::UndoableList<NodeType>::begin()
{
  return quasi_iterator( m_vnode.next );
}

/**
 * @return an iterator on the last element of the list.
 */
template <typename NodeType>
INLINE
typename ImaGene::UndoableList<NodeType>::quasi_iterator 
ImaGene::UndoableList<NodeType>::end()
{
  return quasi_iterator( &m_vnode );
}

/**
 * @return a const iterator on the first element of the list.
 */
template <typename NodeType>
INLINE
typename ImaGene::UndoableList<NodeType>::const_iterator
ImaGene::UndoableList<NodeType>::begin() const
{
  return const_iterator( m_vnode.next );
}

/**
 * @return a const iterator on the last element of the list.
 */
template <typename NodeType>
INLINE
typename ImaGene::UndoableList<NodeType>::const_iterator
ImaGene::UndoableList<NodeType>::end() const
{
  return const_iterator( &m_vnode );
}


/**
 * Clears the list. Note: this modification is \b not stored,
 * whichever the storing mode of the list. It thus clears also the
 * stack of modifications. Storing mode is left unchanged.
 */
template <typename NodeType>
INLINE
void
ImaGene::UndoableList<NodeType>::clear()
{
  Cell* cur = m_vnode.next;
  Cell* next;
  while ( cur != &m_vnode )
    {
      next = cur->next;
      delete cur;
      cur = next;
    }
  m_vnode.next = &m_vnode;
  m_vnode.previous = &m_vnode;
  clearModifs();
}

/**
 *  @brief  Remove element at given position.
 *  @param  it Iterator pointing to element to be erased.
 *  @return  An iterator pointing to the next element (or end()).
 *
 *  This function will erase the element at the given position and
 *  thus shorten the list by one. Memorizes the transformation of
 *  the list if in storing mode.
 *
 *  Due to the nature of a list this operation can be done in
 *  constant time, and only invalidates iterators/references to
 *  the element being removed.  The user is also cautioned that
 *  this function only erases the element, and that if the element
 *  is itself a pointer, the pointed-to memory is not touched in
 *  any way.  Managing the pointer is the user's responsibilty.
 */
template <typename NodeType>
INLINE
typename ImaGene::UndoableList<NodeType>::quasi_iterator
ImaGene::UndoableList<NodeType>::erase
( ImaGene::UndoableList<NodeType>::quasi_iterator it )
{
  Cell* c = it.current();
  ASSERT_UndoableList( c != &m_vnode );
  Cell* p = c->previous;
  Cell* n = c->next;
  p->next = n;
  n->previous = p;
  if ( isStoring() )
    m_modifs.push( Modif::makeSuppression( c, n ) );
  else
    delete c;
  return quasi_iterator( n );
}

/**
 *  @brief  Remove a range of elements.
 *  @param  first  Iterator pointing to the first element to be erased.
 *  @param  last  Iterator pointing to one past the last element to be
 *                erased.
 *  @return  An iterator pointing to the element pointed to by @a last
 *           prior to erasing (or end()).
 *
 *  This function will erase the elements in the range @a
 *  [first,last) and shorten the list accordingly.  Memorizes the
 *  transformations of the list if in storing mode.
 *
 *  Due to the nature of a list this operation can be done in
 *  constant time, and only invalidates iterators/references to
 *  the element being removed.  The user is also cautioned that
 *  this function only erases the elements, and that if the
 *  elements themselves are pointers, the pointed-to memory is not
 *  touched in any way.  Managing the pointer is the user's
 *  responsibilty.
 */
template <typename NodeType>
INLINE
typename ImaGene::UndoableList<NodeType>::quasi_iterator
ImaGene::UndoableList<NodeType>::erase
( ImaGene::UndoableList<NodeType>::quasi_iterator first, 
  ImaGene::UndoableList<NodeType>::quasi_iterator last )
{
  while ( first != last )
    first = erase( first );
  return last;
}

/**
 *  @brief  Inserts given value into %list before specified iterator.
 *  @param  position  An iterator into the %list.
 *  @param  x  Data to be inserted.
 *  @return  An iterator that points to the inserted data.
 *
 *  Memorizes the transformations of the list if in storing mode.
 *
 *  This function will insert a copy of the given value before
 *  the specified location.  Due to the nature of a %list this
 *  operation can be done in constant time, and does not
 *  invalidate iterators and references.
 */
template <typename NodeType>
INLINE
typename ImaGene::UndoableList<NodeType>::quasi_iterator
ImaGene::UndoableList<NodeType>::insert
( ImaGene::UndoableList<NodeType>::quasi_iterator position, 
  const NodeType & x)
{
  Cell* n = position.current();
  Cell* p = n->previous;
  Cell *c = new Cell( x, p, n );
  p->next = c;
  n->previous = c;
  if ( isStoring() )
    m_modifs.push( Modif::makeInsertion( c, n ) );
    
  return quasi_iterator( c );
}

/**
 *  @brief  Inserts a range into the %list.
 *  @tparam InputIterator any input iterator.
 *  @param  position  An iterator into the %list.
 *  @param  first  An input iterator.
 *  @param  last   An input iterator.
 *
 *  This function will insert copies of the data in the range [@a
 *  first,@a last) into the %list before the location specified by
 *  @a position.
 *
 *  This operation is linear in the number of elements inserted and
 *  does not invalidate iterators and references.
 */
template <typename NodeType>
template <typename InputIterator>
INLINE
void
ImaGene::UndoableList<NodeType>::insert
( ImaGene::UndoableList<NodeType>::quasi_iterator position, 
  InputIterator first, InputIterator last)
{
  for ( ; first != last; ++first )
    {
      position = this->insert( position, *first );
      ++position;
    }
}



/**
 *  @brief  Assigns given value into %list at specified iterator.
 *
 *  @param position An iterator into the %list, returns an
 *  iterator that points to the assigned data.
 *
 *  @param  x Data to be assigned.
 *
 *  Memorizes the transformations of the list if in storing mode.
 *
 *  This function will assign a copy of the given value at the
 *  specified location.  Due to the nature of a %list this
 *  operation can be done in constant time. The former iterator is
 *  invalidated if in storing mode, since in this case the
 *  assigned cell is in fact moved out of the list. The user
 *  should use the returned iterator to go on in the list.
 */
template <typename NodeType>
INLINE
void
ImaGene::UndoableList<NodeType>::assign
( ImaGene::UndoableList<NodeType>::quasi_iterator & position, 
  const NodeType & x)
{
  Cell* r = position.current();
  ASSERT_UndoableList( r != 0 
		       && "[UndoableList<NodeType>::assign()] The iterator is not valid." );
  if ( isStoring() )
    {
      Cell* p = r->previous;
      Cell* n = r->next;
      Cell *c = new Cell( x, p, n );
      p->next = c;
      n->previous = c;
      m_modifs.push( Modif::makeModification( r, c ) );
      position = quasi_iterator( c );
    }
  else
    r->node = x;
}


/**
 * Removes all stored modifs.
 */
template <typename NodeType>
INLINE
void 
ImaGene::UndoableList<NodeType>::clearModifs()
{
  while ( ! m_modifs.empty() )
    {
      Modif m = m_modifs.top();
      if ( ( m.type() == Suppression )
	   || ( m.type() == Modification ) )
	delete m.cell1();
      m_modifs.pop();
    }
}


///////////////////////////////////////////////////////////////////////////////
// ----------------------- Interface --------------------------------------

/**
 * Writes/Displays the object on an output stream.
 * @param that_stream the output stream where the object is written.
 */
template <typename NodeType>
INLINE
void 
ImaGene::UndoableList<NodeType>::selfDisplay
( std::ostream & that_stream ) const
{
  that_stream << "[UndoableList<>"
	      << " storing=" << ( isStoring() ? "Yes" : "No" )
	      << " size=" << size()
	      << " undo_stored=" << m_modifs.size()
	      << " ]" << std::endl;
}

/**
 * Writes/Displays the elements of the list on an output stream.
 * @param that_stream the output stream where the object is written.
 */
template <typename NodeType>
INLINE
void 
ImaGene::UndoableList<NodeType>::displayElements
( std::ostream & that_stream ) const
{
  that_stream << "[";
  for ( typename ImaGene::UndoableList<NodeType>::const_iterator it = begin();
	it != end();
	++it )
    that_stream << " " << *it;
  that_stream << "]" << std::endl;
}


/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename NodeType>
INLINE
bool
ImaGene::UndoableList<NodeType>::OK() const
{
  return true;
}

///////////////////////////////////////////////////////////////////////////////
// Static services - public :

/**
 * Performs several self tests on this class. Must be specialized.
 *
 * @param out the output stream where some info is displayed.
 * @return always 'true'.
 */
template <typename NodeType>
INLINE
bool
ImaGene::UndoableList<NodeType>::selfTest( std::ostream & out )
{
  return true;
}

namespace ImaGene {

  /**
   * Performs several self tests on this class.
   *
   * @param out the output stream where some info is displayed.
   * @return 'true' if everything went well, 'false' otherwise.
   */
  template <>
  INLINE
  bool
  UndoableList<int>::selfTest( std::ostream & out )
  {
    uint nb_ok = 0;
    uint nb_tests = 0;
    UndoableList<int>* undo_list = new UndoableList<int>;
    
    out << "-- " << nb_ok << "/" << nb_tests 
	<< " ------------------------------" << std::endl;
    out << "Adding 1, 4, 9, ... 100 at begin()" << std::endl;
    undo_list->beginModifGroup();
    for (int i=1; i<=10; i++)
      undo_list->insert( undo_list->begin(), i*i );
    undo_list->endModifGroup();
    undo_list->displayElements( out );
#ifdef DEBUG
    out << "nb_cells=" << undoablelist_nb_cells << std::endl;
#endif
    nb_ok += ( undo_list->size() == 10 ) ? 1 : 0;
    ++nb_tests;
    out << "-- " << nb_ok << "/" << nb_tests 
	<< " ------------------------------" << std::endl;
    
    out << "Adding 10, 20, 30, ... 70 at end()" << std::endl;
    undo_list->beginModifGroup();
    for (int i=1; i<=7; i++)
      undo_list->insert( undo_list->end(), 10*i );
    undo_list->endModifGroup();
    undo_list->displayElements( out );
#ifdef DEBUG
    out << "nb_cells=" << undoablelist_nb_cells << std::endl;
#endif
    nb_ok += ( undo_list->size() == 17 ) ? 1 : 0;
    ++nb_tests;
    out << "-- " << nb_ok << "/" << nb_tests 
	<< " ------------------------------" << std::endl;
    
    out << "Removing 16, ... 81" << std::endl;
    undo_list->beginModifGroup();
    for (int i=1; i<=6; i++)
      undo_list->erase( ++undo_list->begin() );
    undo_list->endModifGroup();
    undo_list->displayElements( out );
#ifdef DEBUG
    out << "nb_cells=" << undoablelist_nb_cells << std::endl;
#endif
    nb_ok += ( undo_list->size() == 11 ) ? 1 : 0;
    ++nb_tests;
    out << "-- " << nb_ok << "/" << nb_tests 
	<< " ------------------------------" << std::endl;
    
    out << "Doubles every value." << std::endl;
    undo_list->beginModifGroup();
    for ( UndoableList<int>::quasi_iterator it = undo_list->begin();
	  it != undo_list->end();
	  ++it )
      undo_list->assign( it, (*it) * 2 );  
    undo_list->endModifGroup();
    undo_list->displayElements( out );
#ifdef DEBUG
    out << "nb_cells=" << undoablelist_nb_cells << std::endl;
#endif
    nb_ok += ( undo_list->size() == 11 ) ? 1 : 0;
    ++nb_tests;
    out << "-- " << nb_ok << "/" << nb_tests 
	<< " ------------------------------" << std::endl;
    
    out << "Undo Doubles every value." << std::endl;
    undo_list->undoGroup();
    undo_list->displayElements( out );
#ifdef DEBUG
    out << "nb_cells=" << undoablelist_nb_cells << std::endl;
#endif
    nb_ok += ( undo_list->size() == 11 ) ? 1 : 0;
    ++nb_tests;
    out << "-- " << nb_ok << "/" << nb_tests 
	<< " ------------------------------" << std::endl;
    
    out << "Undo Removing 16, ... 81" << std::endl;
    undo_list->undoGroup();
    undo_list->displayElements( out );
#ifdef DEBUG
    out << "nb_cells=" << undoablelist_nb_cells << std::endl;
#endif
    nb_ok += ( undo_list->size() == 17 ) ? 1 : 0;
    ++nb_tests;
    out << "-- " << nb_ok << "/" << nb_tests 
	<< " ------------------------------" << std::endl;
    
    out << "Undo Adding 10, 20, 30, ... 70 at end()" << std::endl;
    undo_list->undoGroup();
    undo_list->displayElements( out );
#ifdef DEBUG
    out << "nb_cells=" << undoablelist_nb_cells << std::endl;
#endif
    nb_ok += ( undo_list->size() == 10 ) ? 1 : 0;
    ++nb_tests;
    out << "-- " << nb_ok << "/" << nb_tests 
	<< " ------------------------------" << std::endl;
    
    out << "Undo Adding 1, 4, 9, ... 100 at begin()" << std::endl;
    undo_list->undoGroup();
    undo_list->displayElements( out );
#ifdef DEBUG
    out << "nb_cells=" << undoablelist_nb_cells << std::endl;
#endif
    nb_ok += ( undo_list->size() == 0 ) ? 1 : 0;
    ++nb_tests;
    out << "-- " << nb_ok << "/" << nb_tests 
	<< " ------------------------------" << std::endl;
    
    delete undo_list;
#ifdef DEBUG
    out << "nb_cells=" << undoablelist_nb_cells << std::endl;
#endif
    
    return nb_ok == nb_tests;
  }

} // namespace ImaGene


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'UndoableList'.
 * @param that_stream the output stream where the object is written.
 * @param that_object_to_display the object of class 'UndoableList' to write.
 * @return the output stream after the writing.
 */
template <typename NodeType>
INLINE
std::ostream&
ImaGene::operator<<( std::ostream & that_stream, 
		     const UndoableList<NodeType> & that_object_to_display )
{
  that_object_to_display.selfDisplay( that_stream );
  return that_stream;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


