//////////////////////////////////////////////////////////////////////////////
//                                                                          //
// File name : Matrix.ih
//
// Creation : 2005/01/04
//
// Version : 2005/01/04
//
// Author : JOL
//
// Summary : Implementation of inline methods defined in Matrix.h 
//
// History :
//	2005/01/04 : ?Name? : ?What?
//
// Rcs Id : "@(#)class Matrix declaration."
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iostream>
//////////////////////////////////////////////////////////////////////////////

#if defined(NO_DEBUG)
#define ASSERT_Matrix(x)
#define DEBUGCMD_Matrix(x)
#else //defined(NO_DEBUG)
#define ASSERT_Matrix(x) if(!(x)) \
    { std::cerr << "Assertion failed : (" << #x << ')' << std::endl \
    << "In file : " << __FILE__ << " at line #" << __LINE__ << std::endl \
    << "Compiled the " << __DATE__ << " at " << __TIME__ << std::endl; abort();}
#define DEBUGCMD_Matrix(x) x
#endif // else defined(NO_DEBUG)

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


/**
 * @return the number of rows in the matrix.
 */
uint 
ImaGene::Matrix::rows(void) const
{
  return m_nb_rows;
}

/**
 * @deprecated
 * @return the number of rows in the matrix.
 * @see rows
 */
uint 
ImaGene::Matrix::lines(void) const
{
  return m_nb_rows;
}



/**
 * Returns the number of columns in the matrix.
 */
uint
ImaGene::Matrix::columns(void) const
{
  return m_nb_columns;
}



/**
 * Returns a constant reference to the coefficient at position (\a
 * i, \a j) in the matrix.
 *
 * \pre \a i must lay between \a 0 and \c this->lines() and \a j
 * must lay between \a 0 and \c this->columns() .
 *
 * \param i the line of the coefficient to be read.
 *
 * \param j the column of the coefficient to be read.
 */
const float& 
ImaGene::Matrix::ro(uint i, uint j) const
{
  ASSERT_Matrix( i < lines() );
  ASSERT_Matrix( j < columns() );
  
  return m_data[ i*m_nb_columns + j ];
}



/**
 * Returns a modifiable reference to the coefficient at position (\a
 * i, \a j) in the matrix.
 *
 * \pre \a i must lay between \a 0 and \c this->lines() and \a j
 * must lay between \a 0 and \c this->columns() .
 *
 * \param i the line of the coefficient to be read.
 *
 * \param j the column of the coefficient to be read.
 */
float& 
ImaGene::Matrix::rw(uint i, uint j)
{
  ASSERT_Matrix( i < lines() );
  ASSERT_Matrix( j < columns() );
  
  return m_data[ i*m_nb_columns + j ];
}





///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'Matrix'.
 * @param that_stream the output stream where the object is written.
 * @param that_object_to_display the object of class 'Matrix' to write.
 * @return the output stream after the writing.
 */
std::ostream&
ImaGene::operator<<( std::ostream & that_stream, 
		 const Matrix & that_object_to_display )
{
  that_object_to_display.selfDisplay( that_stream );
  return that_stream;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


